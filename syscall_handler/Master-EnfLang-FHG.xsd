<?xml version="1.0"?>
<xs:schema
	targetNamespace="http://www.master-fp7.eu/Master-EnfLang-FHG"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xmlns:fn = "http://www.w3.org/2005/xpath-functions"
	xmlns:event="http://www.master-fp7.eu/event"
	xmlns:propositionalLogic="http://www.master-fp7.eu/propositionalLogic"
	xmlns:pastOSL="http://www.master-fp7.eu/pastOSL"
	xmlns="http://www.master-fp7.eu/Master-EnfLang-FHG"
	elementFormDefault="qualified">

<xs:import namespace="http://www.master-fp7.eu/event" schemaLocation="event.xsd"/>
<xs:import namespace="http://www.master-fp7.eu/propositionalLogic" schemaLocation="propositionalLogic.xsd"/>
<xs:import namespace="http://www.master-fp7.eu/pastOSL" schemaLocation="pastOSL.xsd"/>

<xs:element name="monitorConfiguration">
	<xs:complexType>
		<xs:sequence>
			<xs:element ref="event:eventDeclaration" minOccurs="0" maxOccurs="unbounded"/>
			<xs:choice minOccurs="0" maxOccurs="unbounded">
			<!--
				<xs:element ref="reactionMechanism"/>
		    -->
				<xs:element ref="controlMechanism"/>
			</xs:choice>
		</xs:sequence>
	</xs:complexType>
</xs:element>

<xs:element name="controlMechanism">
	<xs:annotation>
		<xs:documentation>
			Control mechanisms can only come to decisions on the grounds
			of their current knowledge, so they use past formulas.
			The mechanism consists of an Event, a Condition, and an Action part (ECA).
			The Event is called trigger Event.
			When the condition evaluates to true the action part is executed.			
		</xs:documentation>
	</xs:annotation>
	<xs:complexType>
		<xs:sequence>
			<xs:element name="id" type="xs:string"/>
			<xs:element name="description" type="xs:string"/>
			<xs:element ref="event:triggerEvent" minOccurs="0" maxOccurs="1"/>
			<xs:choice>
				<xs:element name="condition" type="xs:string"/>
				<xs:element name="XPathEval" type="xs:string"/>
				<xs:element ref="propositionalLogic:condition"/>
				<xs:element ref="pastOSL:condition"/>       
			</xs:choice>
			<xs:element ref="actions"/>
		</xs:sequence>
	</xs:complexType>
</xs:element>

<xs:element name="actions">
  <xs:complexType>
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:choice>
                <xs:element ref="allow"/>
                <xs:element ref="inhibit"/>
	   		</xs:choice> 	    
            <xs:choice>
                <xs:element ref="execute" minOccurs="0" maxOccurs="unbounded"/>
	    </xs:choice>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="inhibit">
	<xs:complexType>
		<xs:sequence>
		    <xs:element ref="delay" minOccurs="0"/>
		</xs:sequence>
	</xs:complexType>
</xs:element>

<xs:element name="allow">
	<xs:annotation>
		<xs:documentation>
			Mechanisms that only contain allow action without modify/delay
			and no actions do not make sense
			Allows the trigger event to take place.
			In our concrete semantics this means that the action
			behind the event should be allowed to take place. ?		
			Allow must be delay or modify, otherwise there is
			no reason for this control mechanism.
			If we allow the event and we do not delay or modify it
			why do we need this mechanism at all?		
		</xs:documentation>
	</xs:annotation>
	<xs:complexType>
		<xs:sequence>
	    	<xs:element ref="delay" minOccurs="0" maxOccurs="1"/>
        	<xs:element ref="modify" minOccurs="0" maxOccurs="1"/>
		</xs:sequence>
	</xs:complexType>
</xs:element>

<xs:element name="delay">
  <xs:complexType>
	<xs:attribute name="duration" type="xs:string" use="required"/>
	<xs:attribute name="unit" type="xs:string" default="seconds"/>
  </xs:complexType>
</xs:element>

<xs:element name="modify">
  <xs:complexType>
	<xs:sequence>
		<xs:element ref="parameter" maxOccurs="unbounded"/>
   	</xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="execute">
  <xs:complexType>
    <xs:sequence>
		<xs:element ref="action" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="action">
	<xs:complexType>
		<xs:sequence>
			<xs:element name="id" type="xs:string"/>
			<xs:element name="type" type="xs:string" minOccurs="0"/>
			<xs:element name="targetComponent" type="xs:string" minOccurs="0"/>
	   		<xs:sequence>
				<xs:element ref="parameter" minOccurs="0" maxOccurs="unbounded"/>
	    	</xs:sequence>
		</xs:sequence>
	</xs:complexType>
</xs:element>

<xs:element name="parameter">
	<xs:complexType>
		<xs:attribute name="name"  type="xs:string" use="required"/>
		<xs:attribute name="type"  type="xs:string" default="string"/>
		<xs:attribute name="value" type="xs:string" use="required"/>
	</xs:complexType>
</xs:element>

</xs:schema>
