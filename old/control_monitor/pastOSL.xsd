<?xml version="1.0"?>

<xs:schema
	targetNamespace="http://www.master-fp7.eu/pastOSL"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xmlns:fn = "http://www.w3.org/2005/xpath-functions"
	xmlns="http://www.master-fp7.eu/pastOSL"
	xmlns:event="http://www.master-fp7.eu/event"	
	xmlns:propositionalLogic="http://www.master-fp7.eu/propositionalLogic"
	elementFormDefault="qualified">

	<xs:import namespace="http://www.master-fp7.eu/event" schemaLocation="event.xsd"/>
	<xs:import namespace="http://www.master-fp7.eu/propositionalLogic" schemaLocation="propositionalLogic.xsd"/>

<xs:element name="condition">
	<xs:annotation>
		<xs:documentation>
			We have two options for a condition with respect to time,
			time can be continous with absolute timestamp values
			or discrete with timesteps.
			For example:
			after[3 time steps](event)
		    after[3 seconds](event)
        	We adopt in our monitors for the past absolute continous time.        	
		</xs:documentation>
	</xs:annotation>
	<xs:complexType>
		<xs:sequence>
			<xs:element name="description" type="xs:string" minOccurs="0"/>
			<!--
			-->
			<xs:group ref="formula"/>
		</xs:sequence>
		<xs:attribute name="timeStep" type="xs:string"/>
		<xs:attribute name="startTime" type="xs:string"/>
		<xs:attribute name="endTime" type="xs:string"/>
	</xs:complexType>
</xs:element>

<xs:group name="formula">
	<xs:annotation>
		<xs:documentation> 
		This group defines the elements allowed in a past formula
		</xs:documentation>
	</xs:annotation>
	<xs:choice>
		<xs:element ref="true"/>
		<xs:element ref="false"/>
		<xs:element name="XPathEval" type="xs:string"/>
		<xs:element ref="event:event"/>
		<xs:element ref="not"/>
		<xs:element ref="and"/>
		<xs:element ref="or"/>
		<xs:element ref="implies"/>
		<xs:element ref="always"/>
		<xs:element ref="since"/>
		<xs:element ref="before"/>
		<xs:element ref="during"/>
		<xs:element ref="within"/>
		<xs:element ref="repmax"/>
		<xs:element ref="repsince"/>		
		<xs:element ref="replim"/>
<!--
		<xs:element ref="PermitOnlyEventName"/>
		<xs:element ref="PermitOnlyEventParam"/>
-->		
	</xs:choice>
</xs:group>

<xs:element name="timeInterval">
	<xs:annotation>
		<xs:documentation></xs:documentation>
	</xs:annotation>
	<xs:complexType>
	<xs:attribute name="duration" type="xs:positiveInteger" use="required"/>
	<xs:attribute name="unit">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:enumeration value="usecond"/>
				<xs:enumeration value="msecond"/>
				<xs:enumeration value="second"/>
				<xs:enumeration value="minute"/>
				<xs:enumeration value="hour"/>
				<xs:enumeration value="day"/>
				<xs:enumeration value="week"/>
				<xs:enumeration value="month"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:attribute>
	</xs:complexType>
</xs:element>

<xs:element name="true">
	<xs:annotation>
		<xs:documentation> 
		</xs:documentation>
	</xs:annotation>
	<xs:complexType/>
</xs:element>

<xs:element name="false">
	<xs:annotation>
		<xs:documentation> 
		</xs:documentation>
	</xs:annotation>
	<xs:complexType/>
</xs:element>

<xs:element name="not">
	<xs:annotation>
		<xs:documentation>Equivalent to propositional logic counterparts</xs:documentation>
	</xs:annotation>
	<xs:complexType>
		<xs:group ref="formula"/>
	</xs:complexType>
</xs:element>

<xs:element name="and">
	<xs:annotation>
		<xs:documentation>Equivalent to propositional logic counterparts</xs:documentation>
	</xs:annotation>
	<xs:complexType>
		<xs:sequence>
			<xs:group ref="formula"  minOccurs="2" maxOccurs="2"/>
		</xs:sequence>			
	</xs:complexType>
</xs:element>

<xs:element name="or">
	<xs:annotation>
		<xs:documentation>Equivalent to propositional logic counterparts</xs:documentation>
	</xs:annotation>
	<xs:complexType>
		<xs:sequence>
			<xs:group ref="formula"  minOccurs="2" maxOccurs="2"/>
		</xs:sequence>			
	</xs:complexType>
</xs:element>

<xs:element name="implies">
	<xs:annotation>
		<xs:documentation>Equivalent to propositional logic counterparts</xs:documentation>
	</xs:annotation>
	<xs:complexType>
		<xs:sequence>
			<xs:group ref="formula"  minOccurs="2" maxOccurs="2"/>
		</xs:sequence>			
	</xs:complexType>
</xs:element>

<xs:element name="always">
	<xs:annotation>
        <xs:documentation>
			In the past the formula should have hold in all time steps.
			Equivalent to the LTL Globally (G) operator.
        </xs:documentation>
	</xs:annotation>
	<xs:complexType>
		<xs:sequence>
		    <xs:group ref="formula"/>
		</xs:sequence>
	</xs:complexType>
</xs:element>

<xs:element name="since">
	<xs:annotation>
		<xs:documentation>
			First formula (A) has to stop to hold from
			the first time step in the past every time step
			until the second formula (B) begins to hold.
			If first formula (A) holds all the time the
			since operator will be satisfied as well,
			because we use the weak since operator and
			we do not care if B never begins. (A since B)
			This is equivalente to the LTL weak since operator.			
		</xs:documentation>
	</xs:annotation>
	<xs:complexType>
		<xs:sequence>
		    <xs:group ref="formula"/>
		    <xs:group ref="formula"/>
		</xs:sequence>
	</xs:complexType>
</xs:element>

<xs:element name="before">
	<xs:annotation>
        <xs:documentation>
        	Formula has to have held immediatly before
        	the specified time interval in the past.
        	The time interval depends on the monitor's
        	view of time, it should be expressed as
        	timesteps or absolute time values.
        	This is similar to the LTL previous operator.
        	Before (3 hours, A)
        	                  V Here is 3 hours
        	            V A must be true here (with +- 0.5 hour)
        	|  0  |  1  |  2  |
        	^
        	| Policy starts here
        </xs:documentation>
	</xs:annotation>
	<xs:complexType>
		<xs:sequence>
		    <xs:group ref="formula"/>
		</xs:sequence>
	    <xs:attribute name="timeInterval" type="xs:integer" use="required"/>
	</xs:complexType>
</xs:element>

<xs:element name="during">
	<xs:annotation>
		<xs:documentation>
			A formula should have held constantly during
			the time interval in the past.
			Is it time interval from the beginning of the policy?			
        	During (3 hours, A)
        	Means A has to be always true in the previous/next 3 hours from the start time of the policy?
		</xs:documentation>
	</xs:annotation>
	<xs:complexType>
		<xs:sequence>
		    <xs:group ref="formula"/>
		</xs:sequence>
	    <xs:attribute name="timeInterval" type="xs:integer" use="required"/>
	</xs:complexType>
</xs:element>

<xs:element name="within">
	<xs:annotation>
		<xs:documentation>
			A formula should have held at least once during
			the time interval in the past. Similar to during
			without the requirement for the formula to hold
			every time step.
		</xs:documentation>
	</xs:annotation>
	<xs:complexType>
		<xs:sequence>
		    <xs:group ref="formula"/>
		</xs:sequence>
	    <xs:attribute name="timeInterval" type="xs:integer" use="required"/>
	</xs:complexType>
</xs:element>

<xs:element name="replim">
	<xs:annotation>
		<xs:documentation>
			Specifies a lower and upper bound of ocurrences within
			a fixed time interval in which a formula should hold.
			repLim(lower=0, upper=3, 1 hour, A)			
			In 3 hours min 0 max 3 times A has to hold.
		</xs:documentation>
	</xs:annotation>
	<xs:complexType>
		<xs:sequence>
		    <xs:group ref="propositionalLogic:formula"/>
		</xs:sequence>
	    <xs:attribute name="timeInterval" type="xs:integer" use="required"/>
	    <xs:attribute name="lowerLimit" type="xs:nonNegativeInteger"/>
	    <xs:attribute name="upperLimit" type="xs:positiveInteger"/>
	</xs:complexType>
</xs:element>

<xs:element name="repsince">
	<xs:annotation>
		<xs:documentation> 
			Limits the maximum number of times the first formula (A)
			may hold since the second formula (B) has hold.
		</xs:documentation>
	</xs:annotation>
	<xs:complexType>
		<xs:sequence>
		    <xs:group ref="propositionalLogic:formula"/>
		    <xs:group ref="formula"/>
		</xs:sequence>
	    <xs:attribute name="upperLimit" type="xs:positiveInteger"/>
	</xs:complexType>
</xs:element>

<xs:element name="repmax">
	<xs:annotation>
		<xs:documentation>
			The maximum number of times a formula should occcur
			all the time.
		</xs:documentation>
	</xs:annotation>
	<xs:complexType>
		<xs:sequence>
		    <xs:group ref="formula"/>
		</xs:sequence>
	    <xs:attribute name="limit" type="xs:positiveInteger"/>
	</xs:complexType>
</xs:element>

<xs:element name="PermitOnlyEventName">
	<xs:annotation>
		<xs:documentation> 
		Not implemented.
		</xs:documentation>
	</xs:annotation>
	<xs:complexType/>
</xs:element>

<xs:element name="PermitOnlyEventParam">
	<xs:annotation>
		<xs:documentation> 
		Not implemented.
		</xs:documentation>
	</xs:annotation>
	<xs:complexType/>
</xs:element>

</xs:schema>
	
	