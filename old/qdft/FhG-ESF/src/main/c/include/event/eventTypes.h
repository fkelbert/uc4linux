/*
 * eventTypes.h
 *
 *  Created on: Jul 20, 2011
 *      Author: Cornelius Moucha
 */

#ifndef EVENTTYPES_H_
#define EVENTTYPES_H_

#include <libxml/tree.h>
#include <libxml/parser.h>
#include "action.h"
#include "timestamp.h"

/**
 * For all structs: _s _t _ptr
 */
// Event trace
typedef struct event_trace_s      event_trace_t;
typedef        event_trace_t     *event_trace_ptr;
// Event
typedef struct event_s            event_t;
typedef        event_t           *event_ptr;
// Event parameter
typedef struct event_param_s      event_param_t;
typedef        event_param_t     *event_param_ptr;
// Timestep window
typedef struct timestep_window_s  timestep_window_t;
typedef        timestep_window_t *timestep_window_ptr;
// Discrete trace
typedef struct discrete_trace_s   discrete_trace_t;
typedef        discrete_trace_t * discrete_trace_ptr;
// Event matching operator
typedef struct event_match_op_s   event_match_op_t;
typedef        event_match_op_t  *event_match_op_ptr;
// Parameter matching operator
typedef struct param_match_op_s   param_match_op_t;
typedef        param_match_op_t  *param_match_op_ptr;
//

struct event_trace_s {
  GArray* events;
};

/**
 * @struct event_s event.h
 * @brief Structure for event handling
 *
 * Structure event_s is used for handling events and stores their names, parameters, mode information and whether
 * it is a try-event. Additionally an XML document representation is stored for XPATH evaluation
 **/
struct event_s
{
  uint            id;           /// The id of the event

  action_desc_ptr action_desc;  /// The referenced action description

  bool            is_try;       /// TRUE is desired action or try event

  uint            index;        /// Event index (IDX_START or IDX_ONGOING)

  timestamp_ptr   timestamp;    /// Timestamp of event creation (when the
                                /// event was generated by the event source)

  GHashTable     *params;       /// Event parameters, indexed by parameter
                                /// description name.

  uint            n_references; /// Indicates how many references to this event exist in timestep windows
                                /// When a reference is created counter is incremented,
                                /// when a reference is removed counter is decremented,
                                /// when decrementing, if reference is zero event is freed.
                                /// After processing, if reference counter is zero event is
                                /// not stored in the trace.

  event_trace_ptr event_trace;  /// The trace were this event is stored
  uint            gindex;       /// The index of the event in the trace
  xmlDocPtr       xmlDoc;       /// xml representation for xpath evaluation
};

// dataTypes for paramValue
#define PARAM_STRING  0
#define PARAM_INT     1
#define PARAM_INTADDR 2
#define PARAM_INTSTR  3
#define PARAM_ADDRESS 4 // ???

typedef union event_paramType_u  event_paramType_t;
typedef       event_paramType_t *event_paramType_ptr;

union event_paramType_u
{
  unsigned char *paramString;
  int paramInt;
  unsigned long paramAddress;
} event_paramType;

struct event_param_s
{
  action_param_desc_ptr param_desc;
  unsigned int usageType;                // PARAM_CONTUSAGE or PARAM_DATAUSAGE
  unsigned int paramType;                // defines data-type for paramValue: PARAM_STRING, PARAM_INT, ...
  //unsigned char *value;
  event_paramType_ptr paramValue;
};

struct discrete_trace_s {
//  timestamp_ptr   start_time;
//  time_amount_ptr window_size;
  GArray*         windows;
  uint            cur_window;
  uint            max_n_windows;
};

/*
 * A timestep window contains references to a list of
 * events that happened at the specific timestep window.
 * A window only exists in the context of a specific
 * discrete trace, and has an index.
 * Index 0 means current timestep window,
 * 1 means one timestep in the past,
 * N means N timesteps in the past.
 */
struct timestep_window_s {
  GArray*      events;
};

struct event_match_op_s {
  // Match action description
  action_desc_ptr match_action;
  // Match event index (MATCH_START = eFst / MATCH_ALL = eAll)
  uint match_index;
  // Match try events
  bool match_try;
  // Match event parameters param[1] && param[2] && ... && param[n]
  GHashTable *match_params;
};

struct param_match_op_s
{
  action_param_desc_ptr param_desc;
  unsigned int type; // CONTUSAGE or DATAUSAGE
  unsigned char *value;
  bool is_xpath;
};

struct event_match_eval {
  event_ptr event;
  bool result;
};

#endif /* EVENTTYPES_H_ */
