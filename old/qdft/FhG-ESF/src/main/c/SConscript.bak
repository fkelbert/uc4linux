# main SConscript
import sys, os, platform
basePath=os.getcwd()
buildPath=os.path.join(basePath, "build", str.lower(platform.system()))
installPath=os.path.join(basePath, "..", "..", "..", "target", str.lower(platform.system()), str.lower(platform.machine()), "axis2c")


# only necessary for windows
# if mingw-installation is in c:\local\rd\ -> basePath is "/local/rd" as drive letter (always 'c'?!) is automatically preprended
mingwBasePath="/local/rd/"
# glib2 (static compilation) root path (without include/lib subfolder)
glibStaticPath="/local/rd/usr/home/moucha/workspace/localglibS"
# Java JDK include path
java1="C:\\Program Files\\Java\\jdk1.6.0_24\\include"
java2="C:\\Program Files\\Java\\jdk1.6.0_24\\include\\win32"

def checkLogger(self, cpath):
  curBaseDir=cpath
  buildDir=os.getcwd()
  logfiles = SConscript(env['ESFBASE']+'/libraries/logger/SConsLog', exports=['env','curBaseDir','buildDir'])
  return logfiles

def listDirRecursive(self, top):
  fileList = []
  rootdir = top
  for root, subFolders, files in os.walk(rootdir):
    for file in files:
        fileList.append(os.path.join(root,file))
  return fileList

# create output folder structure (otherwise additional logger configuration headers will be created in src folders)
includePaths=[]
libpath=basePath + "/libraries"
for f in os.listdir(libpath):
  if os.path.isdir(os.path.join(libpath, f)):
    cdir = os.path.join(buildPath, "libraries", f)
    includePaths.append(os.path.join(basePath, "include", f))
    if not os.path.exists(cdir):
      os.makedirs(cdir)

comppath=os.getcwd() + "/components"
for f in os.listdir(comppath):
  if os.path.isdir(os.path.join(comppath, f)):
    cdir = os.path.join(buildPath, "components", f)
    includePaths.append(os.path.join(basePath, "include", f))
    if not os.path.exists(cdir):
      os.makedirs(cdir)

apppath=os.getcwd() + "/applications"
for f in os.listdir(apppath):
  if os.path.isdir(os.path.join(apppath, f)):
    cdir = os.path.join(buildPath, "applications", f)
    includePaths.append(os.path.join(basePath, "include", f))
    if not os.path.exists(cdir):
      os.makedirs(cdir)
    #added for systracePEP (would need recursive procedure)
    if f == "systracePEP":
      for g in os.listdir(cdir):
        if os.path.isdir(os.path.join(apppath, f)):
          cdir2 = os.path.join(buildPath, "applications", "systracePEP", g)
          includePaths.append(os.path.join(basePath, "include", g))
          if not os.path.exists(cdir2):
            os.makedirs(cdir2)
    

AddMethod(Environment, checkLogger)
AddMethod(Environment, listDirRecursive)
env=Environment()
#env = Environment(tools=['default', 'libraries/utilities/doxygen'], toolpath=".")
env.Replace(CCFLAGS = ' -g -pg ')
env.Replace(LINKFLAGS = ' -pg ')
env.Replace(CXXFLAGS = ' -Wno-write-strings ' )
#print env.Dump()
env.Replace(CPPPATH = ['.',
                       basePath+"/include", includePaths, os.path.join(basePath, "include", "base"), os.path.join(buildPath, "libraries", "logger"), basePath+"/applications/systracePEP/systracePEP",
                       #'/usr/include/libxml2','/usr/include/glib-2.0',
                       #'/usr/lib/glib-2.0/include', '/usr/lib/jvm/java-6-openjdk/include',
					   
						mingwBasePath+"/include/libxml2",
						glibStaticPath+"/include/glib-2.0",
						glibStaticPath+"/lib/glib-2.0/include"
                      ])

# will be added automatically during configuration checking
#env.Replace(LIBS=['xml2','glib-2.0'])
env.Replace(LIBS=['glib-2.0','intl','c'])

env.Replace(LIBPATH=[buildPath+"/libraries/logger", buildPath+"/libraries/event", buildPath+"/libraries/action",
                     buildPath+"/libraries/timestamp",
                     buildPath+"/libraries/utilities", buildPath+"/components/pdp", buildPath+"/components/syscallHandler",
                     installPath+"/lib",
                     buildPath+"/applications/systracePEP/syscall_handler",
                     buildPath+"/components/dataCont"
					 ])

env.Append(ESFpdpjni='')
if sys.platform == "win32":
	env.Append(CPPPATH = [java1])
	env.Append(CPPPATH = [java2])					 
	env.Append(LIBPATH = [glibStaticPath+"/lib"])
	env.Append(ESFpdpjni=' -D_JNI_PDP_ -DGLIB_STATIC_COMPILATION -DGOBJECT_STATIC_COMPILATION -D_JNI_IMPLEMENTATION_ -Wl,--kill-at -shared ')

if sys.platform == "openbsd5":
  env.Append(CPPPATH=['/usr/include/libxml2','/usr/include','/usr/local/glib-2.0',
                      '/usr/include/libsoup-2.4',
                      '/usr/lib/glib-2.0/include', '/usr/local/jdk-1.7.0/include', '/usr/local/jdk-1.7.0/include/openbsd',
                      #'/home/workspace/qdft/QDFTgraph/include','/home/workspace/qdft/boost_1_47_0'
                      '#/../../../../QDFTgraph/include','/home/workspace/include'
                     ])
  env.Append(LIBPATH='/usr/lib')

env.Append(ESFBASE=basePath)
env.Append(ESFBUILD=buildPath)
env.Append(ESFINSTALL=installPath)

if ARGUMENTS.get('debug') != "1":
  env.Replace(CCCOMSTR = "Compiling $TARGET")
  env.Replace(CXXCOMSTR = "Compiling C++ $TARGET")
  env.Replace(LINKCOMSTR = "Linking $TARGET")
  env.Replace(SHCCCOMSTR = "Compiling shared library $TARGET")
  env.Replace(SHCXXCOMSTR = "Compiling C++ shared library $TARGET")  
  env.Replace(SHLINKCOMSTR = "Linking shared library $TARGET")
  env.Replace(ARCOMSTR = "Archiving static library $TARGET")
  env.Replace(RANLIBCOMSTR = "Indexing static library $TARGET")

#env.Alias('install', installPath+'/bin')
#env.Alias('install', installPath+'/lib')

# Configuration checking
#env.ParseConfig("pkg-config x11 --cflags --libs")
if not GetOption('clean'):
  errors = False
  conf = Configure(env, clean = False, help = False)

  if not conf.CheckCC():
    errors = True
  if not conf.CheckLib('glib-2.0'):
    errors=True
  if not conf.CheckLib('xml2'):
    errors=True
  #if not conf.CheckLib('tspi'):
    #errors=True
  #if not conf.CheckLib('crypto'):
    #errors=True
  if not conf.CheckLib('pthread'):
    errors=True    
  #if not conf.CheckCHeader('jni.h'):
  #  errors=True

  if errors:
    print "Error occured in configuration check..."
    Exit(1)
  env = conf.Finish()

# need to be added here, otherwise wrong order of library dependency
if sys.platform == "win32":
	env.Append(LIBS=[File('/local/rd/lib/libintl.a')])
	env.Append(LIBS=[File('/local/rd/lib/libiconv.a')])
	env.Append(LIBS=['ole32'])

Help("\nscons       build entire FhG-ESF\n"
       "scons pdp   build component PDP\n"
       "scons as    build component AS\n"
       "scons -c    clean up entire FhG-ESF\n"
    ) 

Return('env')
