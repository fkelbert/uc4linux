# libraries/utilities/SConscript
import os, sys
Import('env','curBaseDir')

# We should follow one convention only!
# memStatic, mem_utils, ESF_memUtils

logfiles = env.checkLogger(curBaseDir)

lUtilities = []

strStatic = env.StaticLibrary('str_utils.c', CCFLAGS=env['CCFLAGS']+'-fno-builtin -fPIC ')
Clean(strStatic, logfiles['str_utils.c'])
env.Append(ESF_strUtils = strStatic)
lUtilities.append(strStatic)

timeStatic=env.StaticLibrary('time_utils.c', CCFLAGS='-g -fno-builtin -fPIC ')
Clean(timeStatic, logfiles['time_utils.c'])
env.Append(ESF_timeUtils = timeStatic)
lUtilities.append(timeStatic)

xmlStatic=env.StaticLibrary('xml_utils.c', CCFLAGS=env['CCFLAGS']+'-fno-builtin -fPIC ')
Clean(xmlStatic, logfiles['xml_utils.c'])
env.Append(ESF_xmlUtils = xmlStatic)
lUtilities.append(xmlStatic)

memStatic=env.StaticLibrary('mem_utils.c', CCFLAGS=env['CCFLAGS']+'-fno-builtin -fPIC ')
Clean(memStatic, logfiles['mem_utils.c'])
env.Append(ESF_memUtils = memStatic)
lUtilities.append(memStatic)

if sys.platform == "openbsd5":
	openBSDStatic=env.StaticLibrary('openbsd_utils.c', CCFLAGS=env['CCFLAGS']+'-fno-builtin -fPIC ')
	Clean(openBSDStatic, logfiles['openbsd_utils.c'])
	env.Append(ESF_openBSDUtils = openBSDStatic)
	lUtilities.append(openBSDStatic)

	systraceStatic=env.StaticLibrary('systrace_utils.c', CCFLAGS=env['CCFLAGS']+'-fno-builtin -fPIC ')
	Clean(systraceStatic, logfiles['systrace_utils.c'])
	env.Append(ESF_systraceUtils = systraceStatic)
	lUtilities.append(systraceStatic)
else:
	print "Skipping not supported openbsd_utils and systrace_utils"

if sys.platform != "win32":
	soupStatic=env.StaticLibrary('soup_utils.c', CCFLAGS=env['CCFLAGS']+'-fno-builtin -fPIC ')
	Clean(soupStatic, logfiles['soup_utils.c'])
	env.Append(ESF_soupUtils = soupStatic)
	lUtilities.append(soupStatic)

	socketStatic=env.StaticLibrary('socket_utils.c', CCFLAGS=env['CCFLAGS']+'-fno-builtin -fPIC ')
	Clean(socketStatic, logfiles['socket_utils.c'])
	env.Append(ESF_socketUtils = socketStatic)
	lUtilities.append(socketStatic)
else:
	print "Skipping not supported socket_utils, soup_utils"

if sys.platform == "linux":
	cryptoStatic=env.StaticLibrary('crypto_utils.c', CCFLAGS=env['CCFLAGS']+'-fno-builtin -fPIC ')
	Clean(cryptoStatic, logfiles['crypto_utils.c'])
	env.Append(ESF_cryptoUtils = cryptoStatic)
	lUtilities.append(cryptoStatic)

	tssStatic=env.StaticLibrary('tss_utils.c', CCFLAGS=env['CCFLAGS']+'-fno-builtin -fPIC ')
	Clean(tssStatic, logfiles['tss_utils.c'])
	env.Append(ESF_tssUtils = tssStatic)
	lUtilities.append(tssStatic)
else:
	print "Skipping not supported crypto_utils and tss_utils"

#axiomStatic=env.StaticLibrary('axiom_utils.c', CCFLAGS=env['CCFLAGS']+'-fno-builtin ')
#Clean(axiomStatic, logfiles['axiom_utils.c'])
#env.Append(ESF_axiomUtils = axiomStatic)

#soapStatic=env.StaticLibrary('soap_utils.c', CCFLAGS=env['CCFLAGS']+'-fno-builtin ')
#Depends(soapStatic, axiomStatic)
#Clean(soapStatic, logfiles['soap_utils.c'])
#env.Append(ESF_soapUtils = soapStatic)

#Alias('utilities', [strStatic,timeStatic, xmlStatic, memStatic, soupStatic, openBSDStatic, systraceStatic, socketStatic])
Alias('utilities', lUtilities)
