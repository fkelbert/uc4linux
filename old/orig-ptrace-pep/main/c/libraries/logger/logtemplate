#include "logger.h"
#include "logger_base.h"

#ifndef _${LOGCONFFILE}
#define _${LOGCONFFILE}

  #ifndef ${LOGUPPER}
    #define ${LOGUPPER} GLOBAL_LOG_LEVEL
  #endif

  #ifndef ${LOGUPPER}_OUTPUT
    #define ${LOGUPPER}_OUTPUT GLOBAL_LOG_OUTPUT
	#ifdef STDOUTFLAG 
		#define ${LOGUPPER}_OUTPUT_STD 1
	#endif
  #endif
    extern FILE *${LOGUPPER}_OUTPUT;
    static char *curlogfilename=QUOTEME(${LOGUPPER}_OUTPUT);

    void ${LOGLOWER}_init(FILE *fp, char *modname, unsigned int level, char *msg, ...);
    void (*${LOGLOWER}_outputfunction)(FILE *fp, char *modname, unsigned int level, char *msg, ... )=${LOGLOWER}_init;
    void ${LOGLOWER}_init(FILE *fp, char *modname, unsigned int level, char *msg, ...)
    {
	  #ifndef ${LOGUPPER}_OUTPUT_STD
		  if(${LOGUPPER}_OUTPUT==NULL)
		  {
			  char *fplogfilename;
			  fplogfilename=(char*)calloc(strlen(curlogfilename) + strlen(log_absPath)+1, sizeof(char));
			  snprintf(fplogfilename, (strlen(log_absPath)+strlen(curlogfilename)+1), "%s%s",log_absPath, curlogfilename);
			  ${LOGUPPER}_OUTPUT=fopen(fplogfilename, "a+");
			  if(${LOGUPPER}_OUTPUT==NULL) {fprintf(stderr,"Error opening logging output file...\n"); exit(EXIT_FAILURE);}
			  free(fplogfilename);
		  }
	  #else
		${LOGUPPER}_OUTPUT = stdout;
	  #endif
      va_list fmtargs;
      va_start(fmtargs,msg);
      vsnprintf(buffer,sizeof(buffer)-1,msg,fmtargs);
      ${LOGLOWER}_outputfunction=rlog;
      ${LOGLOWER}_outputfunction(${LOGUPPER}_OUTPUT, (char*)"${LOGMODULENAME}", level, buffer);
    }

  #if ${LOGUPPER} > LOG_TRACE
    #define log_trace(...)
  #else
    #define log_trace(...) ${LOGLOWER}_outputfunction(${LOGUPPER}_OUTPUT, "${LOGMODULENAME}", LOG_TRACE, __VA_ARGS__)
  #endif

  #if ${LOGUPPER} > LOG_DEBUG
    #define log_debug(...)
  #else
    #define log_debug(...) ${LOGLOWER}_outputfunction(${LOGUPPER}_OUTPUT, "${LOGMODULENAME}", LOG_DEBUG, __VA_ARGS__)
  #endif

  #if ${LOGUPPER} > LOG_INFO
    #define log_info(...)
  #else
    #define log_info(...) ${LOGLOWER}_outputfunction(${LOGUPPER}_OUTPUT, "${LOGMODULENAME}", LOG_INFO, __VA_ARGS__)
  #endif

  #if ${LOGUPPER} > LOG_WARN
    #define log_warn(...)
  #else
    #define log_warn(...) ${LOGLOWER}_outputfunction(${LOGUPPER}_OUTPUT, "${LOGMODULENAME}", LOG_WARN, __VA_ARGS__)
  #endif

  #if ${LOGUPPER} > LOG_ERROR
    #define log_error(...)
  #else
    #define log_error(...) ${LOGLOWER}_outputfunction(${LOGUPPER}_OUTPUT, "${LOGMODULENAME}", LOG_ERROR, __VA_ARGS__)
  #endif

  #if ${LOGUPPER} > LOG_FATAL
    #define log_fatal(...)
  #else
    #define log_fatal(...) ${LOGLOWER}_outputfunction(${LOGUPPER}_OUTPUT, "${LOGMODULENAME}", LOG_FATAL, __VA_ARGS__)
  #endif
#endif
