# libraries/utilities/SConscript
import os, sys
Import('env','curBaseDir')

lUtilities = []

stringObject = env.rdObject('stringUtils.c', ccflags = env['CCFLAGS']+'-fno-builtin ')
Alias('pefStringUtils', stringObject)

xmlObject=env.rdObject('xmlUtils.c', ccflags = env['CCFLAGS']+'-fno-builtin ')
Alias('pefXMLutils', xmlObject)

memObject=env.rdObject('memUtils.c', ccflags = env['CCFLAGS']+'-fno-builtin ')
Alias('pefMemUtils', memObject)

javaObject=env.rdObject('javaUtils.c', ccflags = env['CCFLAGS'])
Alias('pefJavaUtils', javaObject)

lUtilities.append(xmlObject)
lUtilities.append(stringObject)
lUtilities.append(memObject)
lUtilities.append(javaObject)

if sys.platform == "openbsd4":
  openBSDObject=env.Object('openbsdUtils.c', CCFLAGS=env['CCFLAGS']+'-fno-builtin  ')
  env.Append(pefOpenBSDutils = openBSDObject)
  lUtilities.append(openBSDObject)

  systraceObject=env.Object('systraceUtils.c', CCFLAGS=env['CCFLAGS']+'-fno-builtin  ')
  env.Append(pefSystraceUtils = systraceObject)
  lUtilities.append(systraceObject)

if env['PEFCONFIG']['cryptoUtils'] == True:
  cryptoObject=env.Object('cryptoUtils.c', CCFLAGS=env['CCFLAGS']+'-fno-builtin  ')
  env.Append(pefCryptoUtils = cryptoObject)
  lUtilities.append(cryptoObject)

if env['PEFCONFIG']['tssUtils'] == True:
  tssObject=env.Object('tssUtils.c', CCFLAGS=env['CCFLAGS']+'-fno-builtin  ')
  env.Append(pefTSSutils = tssObject)
  lUtilities.append(tssObject)

Alias('utilities', lUtilities)




