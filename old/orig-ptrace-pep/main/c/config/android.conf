# config/android.conf PDP configuration
Import('env')
import logConf

# PEF configuration (module selection; overriding standard selection in platform configuration file (scons.linux, scons.win32)
#env['PEFCONFIG']['pdpjni']      = True

# PDP configuration for Android

# disable compiling
env.Append(android = True)
env.Append(CCFLAGS = " -DPEF_LOGANDROID ")

# PDP configuration; configuration parameters and interface configuration
env['PDPCONFIG']['pdpXMLvalidation']  = 1

env['PDPCONFIG']['DATA_FLOW_ENABLED'] = 0  # 1 = data flow tracking active (OpenBSD)
env['PDPCONFIG']['MONITORING_ACTIVE'] = 0  # print the trace only while firefox is saving (relevant for data flow tracking)

env['PDPCONFIG']['PDP_XMLRPC']        = 0  # PDP input interface via XML-RPC handler (NOT supported in WIN32 due to missing libsoup)
env['PDPCONFIG']['PDP_TCPSOCKET']     = 0  # PDP input interface via TCP socket

#// PDP output interface to PIP
#// > 0 : communication via TCP socket
#// ==1 : communication via JNI-interface
#// ==0 : communication via internal method (internal PIP; only for OpenBSD)
#// < 0 : no PIP?!?! -> stubs returning standard value
env['PDPCONFIG']['PDP_PIPSOCKET'] = 1

env['PDPCONFIG']['PDP_PEPSUBSCRIPTION'] = 1
env['PDPCONFIG']['ABORT_SUBSCRIPTION_ERROR'] = 0  # Abort mechanism deployment after failed PEP subscription

# Logger configuration
# logConf.X => X=[TRACE, DEBUG, INFO, WARN, ERROR, FATAL, DISABLE]
env['PEFLOGCONFIG']['ABSOLUTE_PATH'] = ""

env['PEFLOGCONFIG']['RUNTIME_LOGLEVEL_EVAL'] = 1
env['PEFLOGCONFIG']['RUNTIME_LOGLEVEL']      = logConf.TRACE

env['PEFLOGCONFIG']['GLOBAL_LOG_LEVEL']      = logConf.TRACE
env['PEFLOGCONFIG']['GLOBAL_LOG_OUTPUT']     = 'stdout'

env['PEFLOGCONFIG']['action.c']          = logConf.INFO
env['PEFLOGCONFIG']['actionDescStore.c'] = logConf.INFO

# redirect logger output to file
#env['PEFLOGCONFIG']['action.c_OUTPUT']          = 'actionlog'

Return('env')


