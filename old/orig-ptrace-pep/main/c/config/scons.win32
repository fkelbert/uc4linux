# config/win32 scons configuration
import os
Import('tmpConfig')

env=Environment(tools=['mingw','javac','jar','rmic'], 
                PEFCONFIG=tmpConfig['PEFCONFIG'], 
                PEFBASE=tmpConfig['PEFBASE'], 
                PEFBUILD=tmpConfig['PEFBUILD'], 
                PEFincludes=tmpConfig['PEFincludes'])

# Java JDK include path
java="C:\\Program Files (x86)\\Java\\jdk1.6.0_32\\include"
#java="C:\\Program Files (x86)\\Java\\jdk1.6.0_32\\include"
#java="C:\\Program Files\\Java\\jdk1.6.0_32\\include"

env.Append(CPPPATH=[java])
env.Append(CPPPATH=[os.path.join(java, "win32")])
env.Append(LIBPATH=[os.path.join(java, "..", "jre","bin","client")])

env.Append(LIBPATH=[os.path.join(env['PEFBASE'], "..", "resources", "win32", "glib2", "lib"),
                    os.path.join(env['PEFBASE'], "..", "resources", "win32", "regex", "lib"),
                    os.path.join(env['PEFBASE'], "..", "..", "..") # for jvm -> todo
                   ])
                   

env.Append(PEFpdpjni=' -DPDP_JNI -DGLIB_STATIC_COMPILATION -DGOBJECT_STATIC_COMPILATION -D_JNI_IMPLEMENTATION_ -DLIBXML_STATIC -Wl,--kill-at -shared ')

# glib,xml need to be added manually to ensure libintl, libiconv is linked afterwards
#env.Prepend(LIBS=['glib-2.0','xml2'])
# xml2 muss hier sein, ansonsten wird es automatisch via -lxml2 angehangen ==> shared lib 
# env['LIBS'] wird NICHT fuer PDP verwendet, nur fuer test-apps
env.Prepend(LIBS=['glib-2.0','xml2'])
env.Append(LIBS=['ole32'])
env.Append(LIBS=['ws2_32','wsock32'])

#env.Append(LIBS=['regex'])
# linking to static regex.a not sufficient; still libgnurx required
env.Append(LibRegexStatic=File(os.path.join(env['PEFBASE'], "..", "resources","win32","regex","lib","libregex.a")))
env.Append(LIBS=[env['LibRegexStatic']])

env.Append(LibXML2Static =File(os.path.join(env['PEFBASE'], "..", "resources","win32","lib","libxml2.a")))
env.Append(LibZStatic    =File(os.path.join(env['PEFBASE'], "..", "resources","win32","lib","libz.a")))
env.Append(LibIntlStatic =File(os.path.join(env['PEFBASE'], "..", "resources","win32","lib","libintl.a")))
env.Append(LibIConvStatic=File(os.path.join(env['PEFBASE'], "..", "resources","win32","lib","libiconv.a")))

env.Append(LIBS=[env['LibIntlStatic'], env['LibIConvStatic']])

env.Append(CPPPATH=[os.path.join(env['PEFBASE'], "..", "resources", "win32", "libxml2"),
                    os.path.join(env['PEFBASE'], "..", "resources", "win32", "glib2", "include","glib-2.0"),
                    os.path.join(env['PEFBASE'], "..", "resources", "win32", "glib2", "lib","glib-2.0","include"),
                    os.path.join(env['PEFBASE'], "..", "resources", "win32", "regex", "include")
                   ]
          )

#######################################################################
# module configuration
env['PEFCONFIG']['pdpjni']      = True
env['PEFCONFIG']['socketUtils'] = True

env['PEFCONFIG']['systracePEP'] = False
env['PEFCONFIG']['shellWrapper']= False
env['PEFCONFIG']['dataCont']    = False

Return('env')
