/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TPep2Pdp_H
#define TPep2Pdp_H

#include <thrift/TDispatchProcessor.h>
#include "Services_types.h"

namespace de { namespace tum { namespace in { namespace i22 { namespace uc { namespace thrift { namespace types {

class TPep2PdpIf {
 public:
  virtual ~TPep2PdpIf() {}
  virtual void notifyEventSync( ::de::tum::in::i22::uc::thrift::types::TResponse& _return, const  ::de::tum::in::i22::uc::thrift::types::TEvent& pepEvent) = 0;
  virtual void processEventAsync(const  ::de::tum::in::i22::uc::thrift::types::TobiasEvent& e, const std::string& senderID) = 0;
  virtual void processEventSync( ::de::tum::in::i22::uc::thrift::types::TobiasResponse& _return, const  ::de::tum::in::i22::uc::thrift::types::TobiasEvent& e, const std::string& senderID) = 0;
  virtual void notifyEventAsync(const  ::de::tum::in::i22::uc::thrift::types::TEvent& pepEvent) = 0;
};

class TPep2PdpIfFactory {
 public:
  typedef TPep2PdpIf Handler;

  virtual ~TPep2PdpIfFactory() {}

  virtual TPep2PdpIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TPep2PdpIf* /* handler */) = 0;
};

class TPep2PdpIfSingletonFactory : virtual public TPep2PdpIfFactory {
 public:
  TPep2PdpIfSingletonFactory(const boost::shared_ptr<TPep2PdpIf>& iface) : iface_(iface) {}
  virtual ~TPep2PdpIfSingletonFactory() {}

  virtual TPep2PdpIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(TPep2PdpIf* /* handler */) {}

 protected:
  boost::shared_ptr<TPep2PdpIf> iface_;
};

class TPep2PdpNull : virtual public TPep2PdpIf {
 public:
  virtual ~TPep2PdpNull() {}
  void notifyEventSync( ::de::tum::in::i22::uc::thrift::types::TResponse& /* _return */, const  ::de::tum::in::i22::uc::thrift::types::TEvent& /* pepEvent */) {
    return;
  }
  void processEventAsync(const  ::de::tum::in::i22::uc::thrift::types::TobiasEvent& /* e */, const std::string& /* senderID */) {
    return;
  }
  void processEventSync( ::de::tum::in::i22::uc::thrift::types::TobiasResponse& /* _return */, const  ::de::tum::in::i22::uc::thrift::types::TobiasEvent& /* e */, const std::string& /* senderID */) {
    return;
  }
  void notifyEventAsync(const  ::de::tum::in::i22::uc::thrift::types::TEvent& /* pepEvent */) {
    return;
  }
};

typedef struct _TPep2Pdp_notifyEventSync_args__isset {
  _TPep2Pdp_notifyEventSync_args__isset() : pepEvent(false) {}
  bool pepEvent;
} _TPep2Pdp_notifyEventSync_args__isset;

class TPep2Pdp_notifyEventSync_args {
 public:

  TPep2Pdp_notifyEventSync_args() {
  }

  virtual ~TPep2Pdp_notifyEventSync_args() throw() {}

   ::de::tum::in::i22::uc::thrift::types::TEvent pepEvent;

  _TPep2Pdp_notifyEventSync_args__isset __isset;

  void __set_pepEvent(const  ::de::tum::in::i22::uc::thrift::types::TEvent& val) {
    pepEvent = val;
  }

  bool operator == (const TPep2Pdp_notifyEventSync_args & rhs) const
  {
    if (!(pepEvent == rhs.pepEvent))
      return false;
    return true;
  }
  bool operator != (const TPep2Pdp_notifyEventSync_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPep2Pdp_notifyEventSync_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TPep2Pdp_notifyEventSync_pargs {
 public:


  virtual ~TPep2Pdp_notifyEventSync_pargs() throw() {}

  const  ::de::tum::in::i22::uc::thrift::types::TEvent* pepEvent;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPep2Pdp_notifyEventSync_result__isset {
  _TPep2Pdp_notifyEventSync_result__isset() : success(false) {}
  bool success;
} _TPep2Pdp_notifyEventSync_result__isset;

class TPep2Pdp_notifyEventSync_result {
 public:

  TPep2Pdp_notifyEventSync_result() {
  }

  virtual ~TPep2Pdp_notifyEventSync_result() throw() {}

   ::de::tum::in::i22::uc::thrift::types::TResponse success;

  _TPep2Pdp_notifyEventSync_result__isset __isset;

  void __set_success(const  ::de::tum::in::i22::uc::thrift::types::TResponse& val) {
    success = val;
  }

  bool operator == (const TPep2Pdp_notifyEventSync_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TPep2Pdp_notifyEventSync_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPep2Pdp_notifyEventSync_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPep2Pdp_notifyEventSync_presult__isset {
  _TPep2Pdp_notifyEventSync_presult__isset() : success(false) {}
  bool success;
} _TPep2Pdp_notifyEventSync_presult__isset;

class TPep2Pdp_notifyEventSync_presult {
 public:


  virtual ~TPep2Pdp_notifyEventSync_presult() throw() {}

   ::de::tum::in::i22::uc::thrift::types::TResponse* success;

  _TPep2Pdp_notifyEventSync_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TPep2Pdp_processEventAsync_args__isset {
  _TPep2Pdp_processEventAsync_args__isset() : e(false), senderID(false) {}
  bool e;
  bool senderID;
} _TPep2Pdp_processEventAsync_args__isset;

class TPep2Pdp_processEventAsync_args {
 public:

  TPep2Pdp_processEventAsync_args() : senderID() {
  }

  virtual ~TPep2Pdp_processEventAsync_args() throw() {}

   ::de::tum::in::i22::uc::thrift::types::TobiasEvent e;
  std::string senderID;

  _TPep2Pdp_processEventAsync_args__isset __isset;

  void __set_e(const  ::de::tum::in::i22::uc::thrift::types::TobiasEvent& val) {
    e = val;
  }

  void __set_senderID(const std::string& val) {
    senderID = val;
  }

  bool operator == (const TPep2Pdp_processEventAsync_args & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    if (!(senderID == rhs.senderID))
      return false;
    return true;
  }
  bool operator != (const TPep2Pdp_processEventAsync_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPep2Pdp_processEventAsync_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TPep2Pdp_processEventAsync_pargs {
 public:


  virtual ~TPep2Pdp_processEventAsync_pargs() throw() {}

  const  ::de::tum::in::i22::uc::thrift::types::TobiasEvent* e;
  const std::string* senderID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPep2Pdp_processEventSync_args__isset {
  _TPep2Pdp_processEventSync_args__isset() : e(false), senderID(false) {}
  bool e;
  bool senderID;
} _TPep2Pdp_processEventSync_args__isset;

class TPep2Pdp_processEventSync_args {
 public:

  TPep2Pdp_processEventSync_args() : senderID() {
  }

  virtual ~TPep2Pdp_processEventSync_args() throw() {}

   ::de::tum::in::i22::uc::thrift::types::TobiasEvent e;
  std::string senderID;

  _TPep2Pdp_processEventSync_args__isset __isset;

  void __set_e(const  ::de::tum::in::i22::uc::thrift::types::TobiasEvent& val) {
    e = val;
  }

  void __set_senderID(const std::string& val) {
    senderID = val;
  }

  bool operator == (const TPep2Pdp_processEventSync_args & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    if (!(senderID == rhs.senderID))
      return false;
    return true;
  }
  bool operator != (const TPep2Pdp_processEventSync_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPep2Pdp_processEventSync_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TPep2Pdp_processEventSync_pargs {
 public:


  virtual ~TPep2Pdp_processEventSync_pargs() throw() {}

  const  ::de::tum::in::i22::uc::thrift::types::TobiasEvent* e;
  const std::string* senderID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPep2Pdp_processEventSync_result__isset {
  _TPep2Pdp_processEventSync_result__isset() : success(false) {}
  bool success;
} _TPep2Pdp_processEventSync_result__isset;

class TPep2Pdp_processEventSync_result {
 public:

  TPep2Pdp_processEventSync_result() {
  }

  virtual ~TPep2Pdp_processEventSync_result() throw() {}

   ::de::tum::in::i22::uc::thrift::types::TobiasResponse success;

  _TPep2Pdp_processEventSync_result__isset __isset;

  void __set_success(const  ::de::tum::in::i22::uc::thrift::types::TobiasResponse& val) {
    success = val;
  }

  bool operator == (const TPep2Pdp_processEventSync_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TPep2Pdp_processEventSync_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPep2Pdp_processEventSync_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPep2Pdp_processEventSync_presult__isset {
  _TPep2Pdp_processEventSync_presult__isset() : success(false) {}
  bool success;
} _TPep2Pdp_processEventSync_presult__isset;

class TPep2Pdp_processEventSync_presult {
 public:


  virtual ~TPep2Pdp_processEventSync_presult() throw() {}

   ::de::tum::in::i22::uc::thrift::types::TobiasResponse* success;

  _TPep2Pdp_processEventSync_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TPep2Pdp_notifyEventAsync_args__isset {
  _TPep2Pdp_notifyEventAsync_args__isset() : pepEvent(false) {}
  bool pepEvent;
} _TPep2Pdp_notifyEventAsync_args__isset;

class TPep2Pdp_notifyEventAsync_args {
 public:

  TPep2Pdp_notifyEventAsync_args() {
  }

  virtual ~TPep2Pdp_notifyEventAsync_args() throw() {}

   ::de::tum::in::i22::uc::thrift::types::TEvent pepEvent;

  _TPep2Pdp_notifyEventAsync_args__isset __isset;

  void __set_pepEvent(const  ::de::tum::in::i22::uc::thrift::types::TEvent& val) {
    pepEvent = val;
  }

  bool operator == (const TPep2Pdp_notifyEventAsync_args & rhs) const
  {
    if (!(pepEvent == rhs.pepEvent))
      return false;
    return true;
  }
  bool operator != (const TPep2Pdp_notifyEventAsync_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPep2Pdp_notifyEventAsync_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TPep2Pdp_notifyEventAsync_pargs {
 public:


  virtual ~TPep2Pdp_notifyEventAsync_pargs() throw() {}

  const  ::de::tum::in::i22::uc::thrift::types::TEvent* pepEvent;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class TPep2PdpClient : virtual public TPep2PdpIf {
 public:
  TPep2PdpClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  TPep2PdpClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void notifyEventSync( ::de::tum::in::i22::uc::thrift::types::TResponse& _return, const  ::de::tum::in::i22::uc::thrift::types::TEvent& pepEvent);
  void send_notifyEventSync(const  ::de::tum::in::i22::uc::thrift::types::TEvent& pepEvent);
  void recv_notifyEventSync( ::de::tum::in::i22::uc::thrift::types::TResponse& _return);
  void processEventAsync(const  ::de::tum::in::i22::uc::thrift::types::TobiasEvent& e, const std::string& senderID);
  void send_processEventAsync(const  ::de::tum::in::i22::uc::thrift::types::TobiasEvent& e, const std::string& senderID);
  void processEventSync( ::de::tum::in::i22::uc::thrift::types::TobiasResponse& _return, const  ::de::tum::in::i22::uc::thrift::types::TobiasEvent& e, const std::string& senderID);
  void send_processEventSync(const  ::de::tum::in::i22::uc::thrift::types::TobiasEvent& e, const std::string& senderID);
  void recv_processEventSync( ::de::tum::in::i22::uc::thrift::types::TobiasResponse& _return);
  void notifyEventAsync(const  ::de::tum::in::i22::uc::thrift::types::TEvent& pepEvent);
  void send_notifyEventAsync(const  ::de::tum::in::i22::uc::thrift::types::TEvent& pepEvent);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TPep2PdpProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<TPep2PdpIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (TPep2PdpProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_notifyEventSync(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_processEventAsync(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_processEventSync(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_notifyEventAsync(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  TPep2PdpProcessor(boost::shared_ptr<TPep2PdpIf> iface) :
    iface_(iface) {
    processMap_["notifyEventSync"] = &TPep2PdpProcessor::process_notifyEventSync;
    processMap_["processEventAsync"] = &TPep2PdpProcessor::process_processEventAsync;
    processMap_["processEventSync"] = &TPep2PdpProcessor::process_processEventSync;
    processMap_["notifyEventAsync"] = &TPep2PdpProcessor::process_notifyEventAsync;
  }

  virtual ~TPep2PdpProcessor() {}
};

class TPep2PdpProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  TPep2PdpProcessorFactory(const ::boost::shared_ptr< TPep2PdpIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< TPep2PdpIfFactory > handlerFactory_;
};

class TPep2PdpMultiface : virtual public TPep2PdpIf {
 public:
  TPep2PdpMultiface(std::vector<boost::shared_ptr<TPep2PdpIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~TPep2PdpMultiface() {}
 protected:
  std::vector<boost::shared_ptr<TPep2PdpIf> > ifaces_;
  TPep2PdpMultiface() {}
  void add(boost::shared_ptr<TPep2PdpIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void notifyEventSync( ::de::tum::in::i22::uc::thrift::types::TResponse& _return, const  ::de::tum::in::i22::uc::thrift::types::TEvent& pepEvent) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->notifyEventSync(_return, pepEvent);
    }
    ifaces_[i]->notifyEventSync(_return, pepEvent);
    return;
  }

  void processEventAsync(const  ::de::tum::in::i22::uc::thrift::types::TobiasEvent& e, const std::string& senderID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->processEventAsync(e, senderID);
    }
    ifaces_[i]->processEventAsync(e, senderID);
  }

  void processEventSync( ::de::tum::in::i22::uc::thrift::types::TobiasResponse& _return, const  ::de::tum::in::i22::uc::thrift::types::TobiasEvent& e, const std::string& senderID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->processEventSync(_return, e, senderID);
    }
    ifaces_[i]->processEventSync(_return, e, senderID);
    return;
  }

  void notifyEventAsync(const  ::de::tum::in::i22::uc::thrift::types::TEvent& pepEvent) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->notifyEventAsync(pepEvent);
    }
    ifaces_[i]->notifyEventAsync(pepEvent);
  }

};

}}}}}}} // namespace

#endif
